/* eslint-disable */

/**
 * Generated by Verge3D Puzzles v.4.6.0
 * Thu, 07 Nov 2024 18:45:22 GMT
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */
function createPL(v3d = window.v3d) {

// global variables/constants used by puzzles' functions

var LIST_NONE = '<none>';

var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.pickedObject = '';
_pGlob.hoveredObject = '';
_pGlob.mediaElements = {};
_pGlob.loadedFile = '';
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.openedFile = '';
_pGlob.openedFileMeta = {};
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.intervalTimers = {};
_pGlob.customEvents = new v3d.EventDispatcher();
_pGlob.eventListeners = [];

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster(); // always check visibility

var PL = {};
// backward compatibility
if (v3d[Symbol.toStringTag] !== 'Module') {
    v3d.PL = v3d.puzzles = PL;
}

PL.procedures = PL.procedures || {};




PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    this.procedures["pantalla_mobil_horinzontal"] = pantalla_mobil_horinzontal;
this.procedures["pantalla_mobil_vertical"] = pantalla_mobil_vertical;
this.procedures["pantalla_mobil"] = pantalla_mobil;
this.procedures["pantalla_web"] = pantalla_web;

    var PROC = {
    "pantalla_mobil_horinzontal": pantalla_mobil_horinzontal,
    "pantalla_mobil_vertical": pantalla_mobil_vertical,
    "pantalla_mobil": pantalla_mobil,
    "pantalla_web": pantalla_web,
};

var VARS = Object.defineProperties({}, {
    
});

// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}

// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}

// Describe this function...
function pantalla_mobil_horinzontal() {
  setHTMLElemStyle('display', 'none', 'aviso_celular', true);
}

// Describe this function...
function pantalla_mobil_vertical() {
  setHTMLElemStyle('display', 'flex', 'aviso_celular', true);
}

// getHTMLElemAttribute puzzle
function getHTMLElemAttribute(attr, id, isParent) {
    var elem = getElement(id, isParent);
    return elem ? elem[attr]: '';
}

// removeHTMLElement puzzle
function removeHTMLElement(id, isParent) {

    var elem = getElement(id, isParent);
    if (elem && elem.parentNode)
        elem.parentNode.removeChild(elem);

}

// Describe this function...
function pantalla_mobil() {
  if (getHTMLElemAttribute('innerWidth', ['WINDOW'], false) < getHTMLElemAttribute('innerHeight', ['WINDOW'], false)) {
    pantalla_mobil_vertical();
  }

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('window.addEventListener(\'resize\', function() {' + '\n' +
  '    if (window.innerWidth > window.innerHeight) {' + '\n' +
  '        v3d.puzzles.procedures["pantalla_mobil_horinzontal"]();' + '\n' +
  '    } else {' + '\n' +
  '        v3d.puzzles.procedures["pantalla_mobil_vertical"]();' + '\n' +
  '    }' + '\n' +
  '});' + '\n' +
  '')))(appInstance, v3d, PL, VARS, PROC);

  removeHTMLElement('ayuda', true);
  removeHTMLElement('ayudaContainer', true);
}

// Describe this function...
function pantalla_web() {
  removeHTMLElement('ayudaMovil', true);
  removeHTMLElement('ayudaMovilContainer', true);
}

// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if ((attr == 'href' || attr == 'src') && value instanceof Promise) {
            // resolve promise value for url-based attributes
            value.then(function(response) {
                elem[attr] = response;
            });
        } else {
            elem[attr] = value;
        }
    }
}



// initSettings puzzle
_initGlob.output.initOptions.fadeAnnotations = false;
_initGlob.output.initOptions.useBkgTransp = false;
_initGlob.output.initOptions.preserveDrawBuf = true;
_initGlob.output.initOptions.useCompAssets = true;
_initGlob.output.initOptions.useFullscreen = false;


// initPreloader puzzle
_initGlob.output.initOptions.useCustomPreloader = true;
_initGlob.output.initOptions.preloaderStartCb = function() {
    _initGlob.percentage = 0;
    (function() {})();
};
_initGlob.output.initOptions.preloaderProgressCb = function(percentage) {
    _initGlob.percentage = percentage;
    (function() {
  setHTMLElemAttribute('innerHTML', String(Math.round(_initGlob.percentage)) + '%', 'loading_percentage', true);
  setHTMLElemAttribute('style', ['stroke-dashoffset:',472 - 472 * (Math.round(_initGlob.percentage) / 100),';'].join(''), 'circle', true);
})();
};
_initGlob.output.initOptions.preloaderEndCb = function() {
    _initGlob.percentage = 100;
    (function() {

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('// Detectar si es un dispositivo mÃ³vil' + '\n' +
  'if (/Mobi|Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {' + '\n' +
  '    v3d.puzzles.procedures["pantalla_mobil"]();' + '\n' +
  '} else {' + '\n' +
  '    v3d.puzzles.procedures["pantalla_web"]();' + '\n' +
  '}' + '\n' +
  '')))(appInstance, v3d, PL, VARS, PROC);

  setHTMLElemStyle('display', 'flex', 'logo', true);
  setHTMLElemStyle('display', 'flex', 'menu', true);
  setHTMLElemStyle('display', 'flex', 'ayudas', true);
})();
};

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

// app is more conventional than appInstance (used in exec script and app templates)
var app = appInstance;

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}

this.procedures["reiniciar_pasos"] = reiniciar_pasos;
this.procedures["pasos"] = pasos;

var PROC = {
    "reiniciar_pasos": reiniciar_pasos,
    "pasos": pasos,
};

var VARS = Object.defineProperties({}, {
    'lang': { get: function() { return lang; }, set: function(val) { lang = val; } },
    'sonido': { get: function() { return sonido; }, set: function(val) { sonido = val; } },
    'paso': { get: function() { return paso; }, set: function(val) { paso = val; } },
    'img': { get: function() { return img; }, set: function(val) { img = val; } },
    'camara': { get: function() { return camara; }, set: function(val) { camara = val; } },
    'camara_direccion': { get: function() { return camara_direccion; }, set: function(val) { camara_direccion = val; } },
    'objeto': { get: function() { return objeto; }, set: function(val) { objeto = val; } },
    'i': { get: function() { return i; }, set: function(val) { i = val; } },
    'proceso': { get: function() { return proceso; }, set: function(val) { proceso = val; } },
    'pro1': { get: function() { return pro1; }, set: function(val) { pro1 = val; } },
    'depositos_obj': { get: function() { return depositos_obj; }, set: function(val) { depositos_obj = val; } },
    'sag_mill_feed_obj': { get: function() { return sag_mill_feed_obj; }, set: function(val) { sag_mill_feed_obj = val; } },
    'sag_mill_feed_conveyor_obj': { get: function() { return sag_mill_feed_conveyor_obj; }, set: function(val) { sag_mill_feed_conveyor_obj = val; } },
    'molinoSAG_obj': { get: function() { return molinoSAG_obj; }, set: function(val) { molinoSAG_obj = val; } },
    'pebble_crusher_obj': { get: function() { return pebble_crusher_obj; }, set: function(val) { pebble_crusher_obj = val; } },
    'saranda_obj': { get: function() { return saranda_obj; }, set: function(val) { saranda_obj = val; } },
    'bombas_obj': { get: function() { return bombas_obj; }, set: function(val) { bombas_obj = val; } },
    'bombas_ciclon_obj': { get: function() { return bombas_ciclon_obj; }, set: function(val) { bombas_ciclon_obj = val; } },
    'debajo_bomba_ciclon_obj': { get: function() { return debajo_bomba_ciclon_obj; }, set: function(val) { debajo_bomba_ciclon_obj = val; } },
    'bombas02_obj': { get: function() { return bombas02_obj; }, set: function(val) { bombas02_obj = val; } },
    'faja_obj': { get: function() { return faja_obj; }, set: function(val) { faja_obj = val; } },
    'faja02_obj': { get: function() { return faja02_obj; }, set: function(val) { faja02_obj = val; } },
    'equipo01_obj': { get: function() { return equipo01_obj; }, set: function(val) { equipo01_obj = val; } },
    'faja03_obj': { get: function() { return faja03_obj; }, set: function(val) { faja03_obj = val; } },
    'faja04_obj': { get: function() { return faja04_obj; }, set: function(val) { faja04_obj = val; } },
    'equipo02_obj': { get: function() { return equipo02_obj; }, set: function(val) { equipo02_obj = val; } },
    'depositos02_obj': { get: function() { return depositos02_obj; }, set: function(val) { depositos02_obj = val; } },
    'bombas_03_obj': { get: function() { return bombas_03_obj; }, set: function(val) { bombas_03_obj = val; } },
});

var paso, img, camara, camara_direccion, objeto, proceso, sag_mill_feed_obj, sag_mill_feed_conveyor_obj, molinoSAG_obj, pebble_crusher_obj, saranda_obj, bombas_obj, bombas_ciclon_obj, debajo_bomba_ciclon_obj, depositos_obj, bombas02_obj, faja_obj, faja02_obj, equipo01_obj, faja03_obj, faja04_obj, equipo02_obj, depositos02_obj, bombas_03_obj, i, pro1, lang, sonido;

// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}

// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}

function _checkListenersSame(target0, type0, listener0, optionsOrUseCapture0,
        target1, type1, listener1, optionsOrUseCapture1) {
    const capture0 = Boolean(optionsOrUseCapture0 instanceof Object
            ? optionsOrUseCapture0.capture : optionsOrUseCapture0);
    const capture1 = Boolean(optionsOrUseCapture1 instanceof Object
            ? optionsOrUseCapture1.capture : optionsOrUseCapture1);
    return target0 === target1 && type0 === type1 && listener0 === listener1
            && capture0 === capture1;
}

/**
 * Add the specified event listener to the specified target. This function also
 * stores listener data for easier disposing.
 */
function bindListener(target, type, listener, optionsOrUseCapture) {
    const alreadyExists = _pGlob.eventListeners.some(elem => {
        return _checkListenersSame(elem.target, elem.type, elem.listener,
                elem.optionsOrUseCapture, target, type, listener,
                optionsOrUseCapture);
    });

    if (!alreadyExists) {
        target.addEventListener(type, listener, optionsOrUseCapture);
        _pGlob.eventListeners.push({ target, type, listener, optionsOrUseCapture });
    }
}

// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;

        bindListener(elem, eventType, callback);
    }
}

// createCSSRule puzzle
function createCSSRule(cssRule, cssRuleCont, isParent, mediaRule) {
    var style = document.createElement('style');
    style.type = 'text/css';
    if (mediaRule) {
        style.innerHTML = `@media ${mediaRule} { ${cssRule} { ${cssRuleCont} } }`;
    } else {
        style.innerHTML = `${cssRule} { ${cssRuleCont} }`;
    }

    var styles = (isParent) ? parent.document.getElementsByTagName('head')[0] :
                              document.getElementsByTagName('head')[0];
    styles.appendChild(style)
}

// setCSSRuleStyle puzzle
function setCSSRuleStyle(prop, value, id, isParent, mediaRule) {
    var styles = (isParent) ? parent.document.styleSheets : document.styleSheets;
    for (var i = 0; i < styles.length; i++) {
        /**
         * workaround for "DOMException: Failed to read the 'cssRules' property
         * from 'CSSStyleSheet': Cannot access rules"
         */
        try { var cssRules = styles[i].cssRules; }
        catch (e) { continue; }

        for (var j = 0; j < cssRules.length; j++) {
            var cssRule = cssRules[j];
            if (!mediaRule && cssRule.selectorText == id)
                cssRule.style[prop] = value;
            else if (mediaRule && cssRule.media && cssRule.media.mediaText == mediaRule) {
                var cssRulesMedia = cssRule.cssRules;
                for (var k = 0; k < cssRulesMedia.length; k++) {
                    if (cssRulesMedia[k].selectorText == id)
                        cssRulesMedia[k].style[prop] = value;
                }
            }
        }
    }
}

// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if ((attr == 'href' || attr == 'src') && value instanceof Promise) {
            // resolve promise value for url-based attributes
            value.then(function(response) {
                elem[attr] = response;
            });
        } else {
            elem[attr] = value;
        }
    }
}

// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return obj.type !== 'AmbientLight' &&
           obj.name !== '' &&
           !(obj.isMesh && obj.isMaterialGeneratedMesh) &&
           !obj.isAuxClippingMesh;
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    if (appInstance.scene) {
        appInstance.scene.traverse(function(obj) {
            if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
                objFound = obj;
                if (runTime) {
                    _pGlob.objCache[objName] = objFound;
                }
            }
        });
    }
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc.filter(function(name) {
        return name;
    });
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}

// outline puzzle
function outline(objSelector, doWhat) {
    var objNames = retrieveObjectNames(objSelector);

    if (!appInstance.postprocessing || !appInstance.postprocessing.outlinePass)
        return;
    var outlineArray = appInstance.postprocessing.outlinePass.selectedObjects;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        if (doWhat == "ENABLE") {
            if (outlineArray.indexOf(obj) == -1)
                outlineArray.push(obj);
        } else {
            var index = outlineArray.indexOf(obj);
            if (index > -1)
                outlineArray.splice(index, 1);
        }
    }
}

// Describe this function...
function reiniciar_pasos() {
  outline(['ALL_OBJECTS'], 'DISABLE');
  for (let i = 1; i <= 20; i++) {
    setHTMLElemStyle('backgroundColor', 'transparent', 'paso' + String(i), true);
  }
}

// utility function used by the whenClicked, whenHovered and whenDraggedOver puzzles
function initObjectPicking(callback, eventType, mouseDownUseTouchStart, mouseButtons) {

    var elem = appInstance.renderer.domElement;
    bindListener(elem, eventType, pickListener);

    if (eventType == 'mousedown') {

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        bindListener(elem, touchEventName, pickListener);

    } else if (eventType == 'dblclick') {

        var prevTapTime = 0;

        function doubleTapCallback(event) {

            var now = new Date().getTime();
            var timesince = now - prevTapTime;

            if (timesince < 600 && timesince > 0) {

                pickListener(event);
                prevTapTime = 0;
                return;

            }

            prevTapTime = new Date().getTime();
        }

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        bindListener(elem, touchEventName, doubleTapCallback);
    }

    var raycaster = new v3d.Raycaster();

    function pickListener(event) {

        // to handle unload in loadScene puzzle
        if (!appInstance.getCamera())
            return;

        event.preventDefault();

        var xNorm = 0, yNorm = 0;
        if (event instanceof MouseEvent) {
            if (mouseButtons && mouseButtons.indexOf(event.button) == -1)
                return;
            xNorm = event.offsetX / elem.clientWidth;
            yNorm = event.offsetY / elem.clientHeight;
        } else if (event instanceof TouchEvent) {
            var rect = elem.getBoundingClientRect();
            xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
            yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
        }

        _pGlob.screenCoords.x = xNorm * 2 - 1;
        _pGlob.screenCoords.y = -yNorm * 2 + 1;
        raycaster.setFromCamera(_pGlob.screenCoords, appInstance.getCamera(true));
        var objList = [];
        appInstance.scene.traverse(function(obj){objList.push(obj);});
        var intersects = raycaster.intersectObjects(objList, false);
        callback(intersects, event);
    }
}

function objectsIncludeObj(objNames, testedObjName) {
    if (!testedObjName) return false;

    for (var i = 0; i < objNames.length; i++) {
        if (testedObjName == objNames[i]) {
            return true;
        } else {
            // also check children which are auto-generated for multi-material objects
            var obj = getObjectByName(objNames[i]);
            if (obj && obj.type == "Group") {
                for (var j = 0; j < obj.children.length; j++) {
                    if (testedObjName == obj.children[j].name) {
                        return true;
                    }
                }
            }
        }
    }
    return false;
}

// utility function used by the whenClicked, whenHovered, whenDraggedOver, and raycast puzzles
function getPickedObjectName(obj) {
    // auto-generated from a multi-material object, use parent name instead
    if (obj.isMesh && obj.isMaterialGeneratedMesh && obj.parent) {
        return obj.parent.name;
    } else {
        return obj.name;
    }
}

// whenHovered puzzle
initObjectPicking(function(intersects, event) {

    var prevHovered = _pGlob.hoveredObject;
    var currHovered = '';

    // the event might happen before hover registration
    _pGlob.objHoverInfo = _pGlob.objHoverInfo || [];

    // search for closest hovered object

    var lastIntersectIndex = Infinity;
    _pGlob.objHoverInfo.forEach(function(el) {
        var maxIntersects = el.xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);

            if (objectsIncludeObj(retrieveObjectNames(el.objSelector), objName) && i <= lastIntersectIndex) {
                currHovered = objName;
                lastIntersectIndex = i;
            }
        }
    });

    if (prevHovered == currHovered) return;

    // first - all "out" callbacks, then - all "over"
    _pGlob.objHoverInfo.forEach(function(el) {
        if (objectsIncludeObj(retrieveObjectNames(el.objSelector), prevHovered)) {
            // ensure the correct value of the hoveredObject block
            _pGlob.hoveredObject = prevHovered;
            el.callbacks[1](event);
        }
    });

    _pGlob.objHoverInfo.forEach(function(el) {
        if (objectsIncludeObj(retrieveObjectNames(el.objSelector), currHovered)) {
            // ensure the correct value of the hoveredObject block
            _pGlob.hoveredObject = currHovered;
            el.callbacks[0](event);
        }
    });

    _pGlob.hoveredObject = currHovered;
}, 'mousemove', false);

// whenHovered puzzle
function registerOnHover(objSelector, xRay, cbOver, cbOut) {

    _pGlob.objHoverInfo = _pGlob.objHoverInfo || [];

    _pGlob.objHoverInfo.push({
        objSelector: objSelector,
        callbacks: [cbOver, cbOut],
        xRay: xRay
    });
}

// setTimeout puzzle
function registerSetTimeout(timeout, callback) {
    window.setTimeout(callback, 1000 * timeout);
}

// whenClicked puzzle
function registerOnClick(objSelector, xRay, doubleClick, mouseButtons, cbDo, cbIfMissedDo) {

    // for AR/VR
    _pGlob.objClickInfo = _pGlob.objClickInfo || [];

    _pGlob.objClickInfo.push({
        objSelector: objSelector,
        callbacks: [cbDo, cbIfMissedDo]
    });

    initObjectPicking(function(intersects, event) {

        var isPicked = false;

        var maxIntersects = xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);
            var objNames = retrieveObjectNames(objSelector);

            if (objectsIncludeObj(objNames, objName)) {
                // save the object for the pickedObject block
                _pGlob.pickedObject = objName;
                isPicked = true;
                cbDo(event);
            }
        }

        if (!isPicked) {
            _pGlob.pickedObject = '';
            cbIfMissedDo(event);
        }

    }, doubleClick ? 'dblclick' : 'mousedown', false, mouseButtons);
}

/**
 * Retrieve coordinate system from the loaded scene
 */
function getCoordSystem() {
    var scene = appInstance.scene;

    if (scene && 'coordSystem' in scene.userData) {
        return scene.userData.coordSystem;
    }

    return 'Y_UP_RIGHT';
}


/**
 * Transform coordinates from one space to another
 * Can be used with Vector3 or Euler.
 */
function coordsTransform(coords, from, to, noSignChange) {

    if (from == to)
        return coords;

    var y = coords.y, z = coords.z;

    if (from == 'Z_UP_RIGHT' && to == 'Y_UP_RIGHT') {
        coords.y = z;
        coords.z = noSignChange ? y : -y;
    } else if (from == 'Y_UP_RIGHT' && to == 'Z_UP_RIGHT') {
        coords.y = noSignChange ? z : -z;
        coords.z = y;
    } else {
        console.error('coordsTransform: Unsupported coordinate space');
    }

    return coords;
}


/**
 * Verge3D euler rotation to Blender/Max shortest.
 * 1) Convert from intrinsic rotation (v3d) to extrinsic XYZ (Blender/Max default
 *    order) via reversion: XYZ -> ZYX
 * 2) swizzle ZYX->YZX
 * 3) choose the shortest rotation to resemble Blender's behavior
 */
const eulerV3DToBlenderShortest = function() {

    const eulerTmp = new v3d.Euler();
    const eulerTmp2 = new v3d.Euler();
    const vec3Tmp = new v3d.Vector3();

    return function(euler, dest) {

        const eulerBlender = eulerTmp.copy(euler).reorder('YZX');
        const eulerBlenderAlt = eulerTmp2.copy(eulerBlender).makeAlternative();

        const len = vec3Tmp.setFromEuler(eulerBlender).lengthSq();
        const lenAlt = vec3Tmp.setFromEuler(eulerBlenderAlt).lengthSq();

        dest.copy(len < lenAlt ? eulerBlender : eulerBlenderAlt);
        return coordsTransform(dest, 'Y_UP_RIGHT', 'Z_UP_RIGHT');
    }

}();

// tweenCamera puzzle
function tweenCamera(posOrObj, targetOrObj, duration, doSlot, movementType) {
    var camera = appInstance.getCamera();

    if (Array.isArray(posOrObj)) {
        var worldPos = _pGlob.vec3Tmp.fromArray(posOrObj);
        worldPos = coordsTransform(worldPos, getCoordSystem(), 'Y_UP_RIGHT');
    } else if (posOrObj) {
        var posObj = getObjectByName(posOrObj);
        if (!posObj) return;
        var worldPos = posObj.getWorldPosition(_pGlob.vec3Tmp);
    } else {
        // empty input means: don't change the position
        var worldPos = camera.getWorldPosition(_pGlob.vec3Tmp);
    }

    if (Array.isArray(targetOrObj)) {
        var worldTarget = _pGlob.vec3Tmp2.fromArray(targetOrObj);
        worldTarget = coordsTransform(worldTarget, getCoordSystem(), 'Y_UP_RIGHT');
    } else {
        var targObj = getObjectByName(targetOrObj);
        if (!targObj) return;
        var worldTarget = targObj.getWorldPosition(_pGlob.vec3Tmp2);
    }

    duration = Math.max(0, duration);

    if (appInstance.controls && appInstance.controls.tween) {
        // orbit and flying cameras
        if (!appInstance.controls.inTween) {
            appInstance.controls.tween(worldPos, worldTarget, duration, doSlot,
                    movementType);
        }
    } else {
        // TODO: static camera, just position it for now
        if (camera.parent) {
            camera.parent.worldToLocal(worldPos);
        }
        camera.position.copy(worldPos);
        camera.lookAt(worldTarget);
        doSlot();
    }
}

// Describe this function...
function pasos(paso, img, camara, camara_direccion, objeto) {
  setHTMLElemStyle('display', 'flex', 'information', true);
  proceso = paso;
  setHTMLElemAttribute('src', img, 'ModalInformacion', true);
  reiniciar_pasos();
  setHTMLElemStyle('backgroundColor', 'rgba(8, 167, 255, 0.8)', paso, true);
  tweenCamera(camara, camara_direccion, 1, function() {
    outline(objeto, 'ENABLE');
    registerOnHover(objeto, false, function() {
      if (proceso == paso) {
        setHTMLElemStyle('cursor', 'pointer', ['BODY'], false);
      }
    }, function() {
      if (proceso == paso) {
        setHTMLElemStyle('cursor', 'grab', ['BODY'], false);
      }
    });
    registerOnClick(objeto, false, false, [0,1,2], function() {
      if (proceso == paso) {
        setHTMLElemStyle('display', 'flex', 'contenedorModalInformacion', true);
        registerSetTimeout(0.5, function() {
          setHTMLElemStyle('opacity', '1', 'contenedorModalInformacion', true);
        });
      }
    }, function() {});
  }, 0);
}

// show and hide puzzles
function changeVis(objSelector, bool) {
    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        obj.visible = bool;
        obj.resolveMultiMaterial().forEach(function(objR) {
            objR.visible = bool;
        });
    }
}


setHTMLElemStyle('cursor', 'grab', ['BODY'], false);
eventHTMLElem('mousedown', ['BODY'], false, function(event) {
  setHTMLElemStyle('cursor', 'grabbing', ['BODY'], false);
});
setHTMLElemStyle('backgroundColor', 'rgba(8, 167, 255, 0.8)', 'paso1', true);
eventHTMLElem('mouseup', ['BODY'], false, function(event) {
  setHTMLElemStyle('cursor', 'grab', ['BODY'], false);
});
createCSSRule('.en', "display: flex;", false, '');
createCSSRule('.es', "display: none;", false, '');
lang = 'en';
eventHTMLElem('click', 'btn_lang', true, function(event) {
  if (lang == 'es') {
    lang = 'en';
    setCSSRuleStyle('display', 'flex', '.en', true, '');
    setCSSRuleStyle('display', 'none', '.es', true, '');
    setCSSRuleStyle('display', 'flex', '.en', false, '');
    setCSSRuleStyle('display', 'none', '.es', false, '');
  } else if (lang == 'en') {
    lang = 'es';
    setCSSRuleStyle('display', 'flex', '.es', true, '');
    setCSSRuleStyle('display', 'none', '.en', true, '');
    setCSSRuleStyle('display', 'flex', '.es', false, '');
    setCSSRuleStyle('display', 'none', '.en', false, '');
  }
});
sonido = true;
eventHTMLElem('click', 'btn_sonido', true, function(event) {
  if (sonido) {
    setHTMLElemAttribute('src', '/images/audiono.png', 'btn_sonido_img', true);
    sonido = false;
  } else {
    setHTMLElemAttribute('src', '/images/audio.png', 'btn_sonido_img', true);
    sonido = true;
  }
});

eventHTMLElem('click', 'information', true, function(event) {
  console.log(proceso);
  if (proceso == 'paso2') {
  } else if (proceso == 'paso3') {

    Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('console.log("Prueba antes de enviar el mensaje.");' + '\n' +
    '' + '\n' +
    '    try {' + '\n' +
    '        window.parent.postMessage({param1: 1, param2: 19 }, \'*\');' + '\n' +
    '        console.log("Mensaje enviado con Ã©xito.");' + '\n' +
    '    } catch (error) {' + '\n' +
    '        console.error("Error al enviar el mensaje:", error);' + '\n' +
    '    }' + '\n' +
    '    ')))(appInstance, v3d, PL, VARS, PROC);

  } else if (proceso == 'paso4') {

    Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('window.parent.postMessage({param1: 1, param2:20 },\'*\');' + '\n' +
    'postMessage({param1: 1, param2:20 },\'*\');')))(appInstance, v3d, PL, VARS, PROC);

  } else if (proceso == 'paso5') {

    Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', 'window.parent.postMessage({param1: 1, param2:21 },\'*\');')(appInstance, v3d, PL, VARS, PROC);

  } else if (proceso == 'paso6') {

    Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', 'window.parent.postMessage({param1: 1, param2:21 },\'*\');')(appInstance, v3d, PL, VARS, PROC);

  } else if (proceso == 'paso7') {

    Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', 'window.parent.postMessage({param1: 1, param2:22 },\'*\');')(appInstance, v3d, PL, VARS, PROC);

  } else if (proceso == 'paso8') {

    Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', 'window.parent.postMessage({param1: 1, param2:23 },\'*\');')(appInstance, v3d, PL, VARS, PROC);

  } else if (proceso == 'paso9') {

    Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', 'window.parent.postMessage({param1: 1, param2:24 },\'*\');')(appInstance, v3d, PL, VARS, PROC);

  } else if (proceso == 'paso10') {

    Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', 'window.parent.postMessage({param1: 1, param2:25 },\'*\');')(appInstance, v3d, PL, VARS, PROC);

  } else if (proceso == 'paso11') {

    Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', 'window.parent.postMessage({param1: 1, param2:25 },\'*\');')(appInstance, v3d, PL, VARS, PROC);

  } else if (proceso == 'paso12') {

    Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', 'window.parent.postMessage({param1: 1, param2:26 },\'*\');')(appInstance, v3d, PL, VARS, PROC);

  } else if (proceso == 'paso13') {

    Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', 'window.parent.postMessage({param1: 1, param2:26 },\'*\');')(appInstance, v3d, PL, VARS, PROC);

  } else if (proceso == 'paso14') {

    Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', 'window.parent.postMessage({param1: 1, param2:27 },\'*\');')(appInstance, v3d, PL, VARS, PROC);

  } else if (proceso == 'paso15') {

    Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', 'window.parent.postMessage({param1: 1, param2:28 },\'*\');')(appInstance, v3d, PL, VARS, PROC);

  } else if (proceso == 'paso16') {

    Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', 'window.parent.postMessage({param1: 1, param2:28 },\'*\');')(appInstance, v3d, PL, VARS, PROC);

  } else if (proceso == 'paso17') {

    Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', 'window.parent.postMessage({param1: 1, param2:29 },\'*\');')(appInstance, v3d, PL, VARS, PROC);

  } else if (proceso == 'paso18') {

    Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', 'window.parent.postMessage({param1: 1, param2:29 },\'*\');')(appInstance, v3d, PL, VARS, PROC);

  } else if (proceso == 'paso19') {

    Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', 'window.parent.postMessage({param1: 1, param2:30 },\'*\');')(appInstance, v3d, PL, VARS, PROC);

  } else if (proceso == 'paso20') {

    Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', 'window.parent.postMessage({param1: 1, param2:31 },\'*\');')(appInstance, v3d, PL, VARS, PROC);

  }
});

proceso = 'paso1';
eventHTMLElem('click', 'paso1', true, function(event) {
  setHTMLElemStyle('display', 'none', 'information', true);
  proceso = 'paso1';
  reiniciar_pasos();
  outline(['ALL_OBJECTS'], 'DISABLE');
  setHTMLElemStyle('backgroundColor', 'rgba(8, 167, 255, 0.8)', 'paso1', true);
  tweenCamera('molienda_Pos14', 'molienda_Dir14', 1, function() {}, 0);
});
eventHTMLElem('click', 'paso2', true, function(event) {
  pasos('paso2', './images/01-1.png', 'molienda_Pos13', 'molienda_Dir13', 'equipo_200_CV_0102');
});
eventHTMLElem('click', 'paso3', true, function(event) {

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', 'window.parent.postMessage({param1: 1, param2:19 },\'*\');')(appInstance, v3d, PL, VARS, PROC);

  pasos('paso3', './images/01-2.png', 'molienda_Pos12', 'molienda_Dir12', 'equipo_200_CV_0108');
});
eventHTMLElem('click', 'paso4', true, function(event) {

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', 'window.parent.postMessage({param1: 1, param2:20 },\'*\');')(appInstance, v3d, PL, VARS, PROC);

  pasos('paso4', './images/02-1.png', 'molienda_Pos01', 'molienda_Dir01', 'equipo_200_ML_0120');
});
eventHTMLElem('click', 'paso5', true, function(event) {

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', 'window.parent.postMessage({param1: 1, param2:21 },\'*\');')(appInstance, v3d, PL, VARS, PROC);

  pasos('paso5', './images/03-1.png', 'molienda_Pos02', 'molienda_Dir02', 'equipo_200_SR_0124');
});
eventHTMLElem('click', 'paso6', true, function(event) {
  pasos('paso6', './images/04-1.png', 'molienda_Pos08', 'molienda_Dir08', 'equipo_200_CV_0125');
});
eventHTMLElem('click', 'paso7', true, function(event) {

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', 'window.parent.postMessage({param1: 1, param2:22 },\'*\');')(appInstance, v3d, PL, VARS, PROC);

  pasos('paso7', './images/04-2.png', 'molienda_Pos09', 'molienda_Dir09', 'equipo_200_CV_0127');
});
eventHTMLElem('click', 'paso8', true, function(event) {

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', 'window.parent.postMessage({param1: 1, param2:23 },\'*\');')(appInstance, v3d, PL, VARS, PROC);

  pasos('paso8', './images/05.png', 'molienda_Pos11', 'molienda_Dir11', 'equipo_200_CR_0130');
});
eventHTMLElem('click', 'paso9', true, function(event) {

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', 'window.parent.postMessage({param1: 1, param2:24 },\'*\');')(appInstance, v3d, PL, VARS, PROC);

  pasos('paso9', './images/06-1.png', 'molienda_Pos05', 'molienda_Dir05', 'equipo_200_PP_0175');
});
eventHTMLElem('click', 'paso10', true, function(event) {

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', 'window.parent.postMessage({param1: 1, param2:25 },\'*\');')(appInstance, v3d, PL, VARS, PROC);

  pasos('paso10', './images/07-1.png', 'molienda_Pos03', 'molienda_Dir03', 'equipo_200_PP_0142');
});
eventHTMLElem('click', 'paso11', true, function(event) {

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', 'window.parent.postMessage({param1: 1, param2:25 },\'*\');')(appInstance, v3d, PL, VARS, PROC);

  pasos('paso11', './images/07-1.png', 'molienda_Pos03', 'molienda_Dir03', 'equipo_200_PP_0144');
});
eventHTMLElem('click', 'paso12', true, function(event) {

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', 'window.parent.postMessage({param1: 1, param2:26 },\'*\');')(appInstance, v3d, PL, VARS, PROC);

  pasos('paso12', './images/08-1.png', 'molienda_Pos04', 'molienda_Dir04', 'equipo_200_CL_0150');
});
eventHTMLElem('click', 'paso13', true, function(event) {

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', 'window.parent.postMessage({param1: 1, param2:26 },\'*\');')(appInstance, v3d, PL, VARS, PROC);

  pasos('paso13', './images/09-1.png', 'molienda_Pos10', 'molienda_Dir10', 'equipo_400_SA_0230');
});
eventHTMLElem('click', 'paso14', true, function(event) {});
eventHTMLElem('click', 'paso15', true, function(event) {

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', 'window.parent.postMessage({param1: 1, param2:28 },\'*\');')(appInstance, v3d, PL, VARS, PROC);

  pasos('paso15', './images/10-1.png', 'molienda_Pos06', 'molienda_Dir06', 'equipo_200_TK_0152');
});
eventHTMLElem('click', 'paso16', true, function(event) {

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', 'window.parent.postMessage({param1: 1, param2:28 },\'*\');')(appInstance, v3d, PL, VARS, PROC);

  pasos('paso16', './images/10-1.png', 'molienda_Pos06', 'molienda_Dir06', 'equipo_200_TK_0171');
});
eventHTMLElem('click', 'paso17', true, function(event) {

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', 'window.parent.postMessage({param1: 1, param2:29 },\'*\');')(appInstance, v3d, PL, VARS, PROC);

  pasos('paso17', './images/11-1.png', 'molienda_Pos07', 'molienda_Dir07', 'equipo_200_PP_0156');
});
eventHTMLElem('click', 'paso18', true, function(event) {

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', 'window.parent.postMessage({param1: 1, param2:29 },\'*\');')(appInstance, v3d, PL, VARS, PROC);

  pasos('paso18', './images/11-1.png', 'molienda_Pos07', 'molienda_Dir07', 'equipo_200_PP_0158');
});
eventHTMLElem('click', 'paso19', true, function(event) {

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', 'window.parent.postMessage({param1: 1, param2:30 },\'*\');')(appInstance, v3d, PL, VARS, PROC);

});
eventHTMLElem('click', 'paso20', true, function(event) {

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', 'window.parent.postMessage({param1: 1, param2:31 },\'*\');')(appInstance, v3d, PL, VARS, PROC);

});

sag_mill_feed_obj = 'equipo_200_CV_0102';

sag_mill_feed_conveyor_obj = 'equipo_200_CV_0108';

changeVis(['informacionB01_mesh', 'informacionB02_mesh', 'informacionB03_mesh', 'informacionB04_mesh', 'informacionB05_mesh', 'informacionB06_mesh', 'informacionB07_mesh', 'informacionB08_mesh', 'informacionB09_mesh', 'informacionB10_mesh', 'informacionB11_mesh', 'informacionB12_mesh', 'informacionB13_mesh', 'informacionA01_mesh', 'informacionA02_mesh', 'informacionA03_mesh', 'informacionA04_mesh', 'informacionA05_mesh', 'informacionA06_mesh', 'informacionA07_mesh', 'informacionA08_mesh', 'informacionA09_mesh', 'informacionA10_mesh', 'informacionA11_mesh', 'informacionA12_mesh', 'informacionA13_mesh'], false);

molinoSAG_obj = 'equipo_200_ML_0120';

pebble_crusher_obj = 0;

saranda_obj = 'equipo_200_SR_0124';

bombas_obj = ['equipo_200_PP_0142', 'equipo_200_PP_0144'];

bombas_ciclon_obj = 'equipo_200_CL_0150';

debajo_bomba_ciclon_obj = 'equipo_400_SA_0230';

depositos_obj = 'equipo_200_TK_0152';
depositos02_obj = 'equipo_200_TK_0171';

bombas02_obj = 'equipo_200_PP_0158';
bombas_03_obj = 'equipo_200_PP_0156';

faja_obj = 'equipo_200_CV_0125';

faja02_obj = 'equipo_200_CV_0127';

equipo01_obj = 'equipo_200_CR_0130';

faja03_obj = 'equipo_200_CV_0108';

faja04_obj = 'equipo_200_CV_0102';

equipo02_obj = 'equipo_200_PP_0175';



} // end of PL.init function

PL.disposeListeners = function() {
    if (_pGlob) {
        _pGlob.eventListeners.forEach(({ target, type, listener, optionsOrUseCapture }) => {
            target.removeEventListener(type, listener, optionsOrUseCapture);
        });
        _pGlob.eventListeners.length = 0;
    }
}

PL.dispose = function() {
    PL.disposeListeners();
    _pGlob = null;
    // backward compatibility
    if (v3d[Symbol.toStringTag] !== 'Module') {
        delete v3d.PL;
        delete v3d.puzzles;
    }
}



return PL;

}

export { createPL };
